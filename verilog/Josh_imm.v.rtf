{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red22\green115\blue9;\red234\green234\blue234;\red0\green13\blue116;
\red116\green9\blue2;\red84\green82\blue7;\red10\green83\blue83;}
\margl1440\margr1440\vieww28300\viewh15620\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf2 \cb3 `include "constant_defs.vh" // `\cf0  dummy backquote \cf4 for\cf0  syntax highlighting\
\
\pard\pardeftab720\ql\qnatural
\cf5 // MODULE\cf0 \
\pard\pardeftab720\ql\qnatural
\cf4 module\cf0  imm\cf6 (\cf0 \
\'a0 \cf5 // data\cf0 \
\'a0 input \'a0\cf6 [\cf7 15\cf6 :\cf7 0\cf6 ]\cf0  imm16\cf6 ,\cf0 \
\'a0 \cf5 // control\cf0 \
\'a0 input \'a0c_imm_zse\cf6 ,\cf0 \
\'a0 \cf5 // output\cf0 \
\'a0 output \cf6 [\cf7 31\cf6 :\cf7 0\cf6 ]\cf0  imm32\cf6 ,\cf0 \
\'a0 output \cf6 [\cf0  \cf7 1\cf6 :\cf7 0\cf6 ]\cf0  lbu_byte\
\'a0 \cf6 );\cf0 \
\cf2 `include "constant_params.vh" // `\cf0  dummy\
\
\pard\pardeftab720\ql\qnatural
\cf5 // WIRES\cf0 \
wire \cf6 [\cf7 15\cf6 :\cf7 0\cf6 ]\cf0  extension\cf6 ;\cf0 \
\
\cf5 // ASSIGNMENTS\cf0 \
\cf5 // XXX: Fix me.\cf0 \
\cf5 // hint: \{M\{N\}\} is N repeated M times\cf0 \
\cf5 // \'a0 \'a0 \'a0 \{5\{foo[3:2]\}\} repeats bits 3 and 2 of foo 5 times\cf0 \
\cf5 // \'a0 \'a0 \'a0 equivalent to \{foo[3:2],foo[3:2],foo[3:2],foo[3:2],foo[3:2]\}\cf0 \
\cf5 // hint: X'bY is a signal X bits wide representing the binary number Y\cf0 \
\cf5 // \'a0 \'a0 \'a0 5'b10 represents 00010 in base 2.\cf0 \
\cf5 // so, replace sign_extend with something in the format of \{M\{N\}\}\cf0 \
\cf5 // and replace zero_extend with something in the format of X'bY\cf0 \
assign extension \cf6 =\cf0  \cf6 (\cf0 c_imm_zse \cf6 ==\cf0  MUX_SE\cf6 )\cf0  \cf6 ?\cf0  \{16\{1\}\} \cf6 :\cf0  16'b00\cf6 ;//\{16\{1\}\}=>16 bits of one's , 16'b00=>16 bits of Zeros\cf0 \
\'a0\
assign imm32 \cf6 =\cf0  \cf6 \{\cf0  extension\cf6 ,\cf0  imm16 \cf6 \};\cf0 \
assign lbu_byte \cf6 =\cf0  imm16\cf6 [\cf7 1\cf6 :\cf7 0\cf6 ];\cf0  \cf5 // our byte offset for LBU instruction\cf0 \
\
endmodule}